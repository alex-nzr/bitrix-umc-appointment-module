{"version":3,"file":"bx_popup.bundle.js","sources":["../src/scripts/utils/functions.js","../node_modules/style-inject/dist/style-inject.es.js","../src/scripts/utils/eventManager.js","../src/scripts/utils/renderer.js","../src/types/params.js","../src/scripts/appointment/app.js","../src/scripts/index.js"],"sourcesContent":["\r\nexport function convertHexToHsl(hex) {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n\r\n    if (result)\r\n    {\r\n        let r = parseInt(result[1], 16);\r\n        let g = parseInt(result[2], 16);\r\n        let b = parseInt(result[3], 16);\r\n\r\n        r /= 255; g /= 255; b /= 255;\r\n        const max = Math.max(r, g, b), min = Math.min(r, g, b);\r\n        let h = 0, s, l = (max + min) / 2;\r\n\r\n        if (max === min) {\r\n            h = s = 0; // achromatic\r\n        } else {\r\n            const d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch (max) {\r\n                case r:\r\n                    h = (g - b) / d + (g < b ? 6 : 0);\r\n                    break;\r\n                case g:\r\n                    h = (b - r) / d + 2;\r\n                    break;\r\n                case b:\r\n                    h = (r - g) / d + 4;\r\n                    break;\r\n            }\r\n            h /= 6;\r\n        }\r\n\r\n        s = s*100;\r\n        s = Math.round(s);\r\n        l = l*100;\r\n        l = Math.round(l);\r\n        h = Math.round(360*h);\r\n\r\n        //`hsl(${h}, ${s}%, ${l}%)`\r\n        return {\r\n            h: h,\r\n            s: `${s}%`,\r\n            l: `${l}%`,\r\n        };\r\n    }\r\n    return null;\r\n}","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import {Event} from 'main.core';\r\n\r\nexport class EventManager extends Event.EventEmitter{\r\n    static fullDataLoaded = 'BX.FirstBit.Appointment:dataLoaded';\r\n\r\n    static bind(target: Element, eventName: string, handler: (event: Event) => void, options?: {\r\n        capture?: boolean,\r\n        once?: boolean,\r\n        passive?: boolean,\r\n    }): void{\r\n        Event.bind(target, eventName, handler, options);\r\n    }\r\n}","import styles from \"../../styles/app.scss\";\r\n\r\nexport class Renderer\r\n{\r\n    constructor(styles, application){\r\n        this.styles = styles;\r\n        this.application = application;\r\n    }\r\n\r\n    getAppHtmlSkeleton()\r\n    {\r\n        return BX.create('div', {\r\n            attrs: {\r\n                id: this.application.selectors.overlayId,\r\n                className: this.styles['appointment-popup-overlay']\r\n            },\r\n            children: [\r\n                BX.create('form', {\r\n                    attrs: {\r\n                        id: this.application.selectors.formId,\r\n                        className: this.styles['appointment-form']\r\n                    },\r\n                    children: [\r\n                        BX.create('span', {\r\n                            attrs: {\r\n                                id: this.styles['appointment-form-close'],\r\n                            },\r\n                            html: '&#10006;'\r\n                        }),\r\n\r\n                        ...(this.getSelectionNodes()),\r\n\r\n                        ...(this.getTextNodes()),\r\n\r\n                        BX.create('p', {\r\n                            attrs: {\r\n                                id: this.application.selectors.messageNodeId,\r\n                            },\r\n                        }),\r\n\r\n                        BX.create('div', {\r\n                            attrs: {\r\n                                className: this.styles['appointment-form-button-wrapper'],\r\n                            },\r\n                            children: [\r\n                                BX.create('button', {\r\n                                    attrs: {\r\n                                        type: \"submit\",\r\n                                        id: this.application.selectors.submitBtnId,\r\n                                        className: this.styles['appointment-form-button'],\r\n                                    },\r\n                                    text: BX.message('FIRSTBIT_JS_FORM_BTN_TEXT')\r\n                                }),\r\n                            ]\r\n                        }),\r\n\r\n                        BX.create('p', {\r\n                            attrs: {\r\n                                className: this.styles['appointment-info-message'],\r\n                            },\r\n                            children: [\r\n                                BX.create('span', {\r\n                                    text: `${BX.message('FIRSTBIT_JS_FORM_CONFIRM_INFO_TEXT')} `\r\n                                }),\r\n                                BX.create('a', {\r\n                                    attrs: {\r\n                                        href: this.application.initParams.privacyPageLink,\r\n                                        target: '_blank'\r\n                                    },\r\n                                    text: BX.message('FIRSTBIT_JS_FORM_CONFIRM_INFO_LINK')\r\n                                }),\r\n                            ]\r\n                        }),\r\n\r\n                        BX.create('div', {\r\n                            attrs: {\r\n                                id: this.application.selectors.appResultBlockId\r\n                            },\r\n                            children: [\r\n                                BX.create('p', {\r\n                                    text: ''\r\n                                }),\r\n                            ]\r\n                        }),\r\n\r\n                        BX.create('div', {\r\n                            attrs: {\r\n                                className: this.styles['default-loader-wrapper']\r\n                            },\r\n                            html:   `<svg class=\"${this.styles['default-loader-circular']}\" viewBox=\"25 25 50 50\">\r\n                                        <circle class=\"${this.styles['default-loader-path']}\" cx=\"50\" cy=\"50\" r=\"20\" fill=\"none\" stroke-miterlimit=\"10\"></circle>\r\n                                    </svg>`\r\n                        }),\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    getSelectionNodes()\r\n    {\r\n        const arNodes = [];\r\n        for(const key in this.application.selectionBlocks)\r\n        {\r\n            if (!this.application.selectionBlocks.hasOwnProperty(key)){\r\n                continue;\r\n            }\r\n\r\n            const selected = BX.create('p', {\r\n                attrs: {\r\n                    id: this.application.selectionBlocks[key].selectedId,\r\n                    className: this.styles['selection-item-selected']\r\n                },\r\n                text: this.application.defaultText[key],\r\n                events: {\r\n                    click: () => this.application.toggleSelectionList(key, selected, list)\r\n                }\r\n            });\r\n            const list = BX.create('ul', {\r\n                attrs: {\r\n                    id: this.application.selectionBlocks[key].listId,\r\n                    className: `${this.styles['appointment-form_head_list']} ${this.styles['selection-item-list']}`\r\n                },\r\n                text: this.application.defaultText[key]\r\n            });\r\n            const input = BX.create('input', {\r\n                attrs: {\r\n                    id: this.application.selectionBlocks[key].inputId,\r\n                    name: this.application.selectionBlocks[key].inputId,\r\n                    type: 'hidden',\r\n                }\r\n            });\r\n\r\n            arNodes.push(\r\n                BX.create('div', {\r\n                    attrs: {\r\n                        id: this.application.selectionBlocks[key].blockId,\r\n                        className: `${this.styles['selection-block']} ${key === this.application.dataKeys.clinicsKey ? '' : this.styles['hidden']}`\r\n                    },\r\n                    children: [ selected, list, input ]\r\n                })\r\n            );\r\n        }\r\n        return arNodes;\r\n    }\r\n\r\n    getTextNodes() {\r\n        const arNodes = [];\r\n\r\n        for(const key in this.application.initParams.textBlocks)\r\n        {\r\n            if (!this.application.initParams.textBlocks.hasOwnProperty(key)){\r\n                continue;\r\n            }\r\n            arNodes.push(\r\n                BX.create('label', {\r\n                    attrs: {\r\n                        className: this.styles['appointment-form_input-wrapper'],\r\n                    },\r\n                    children: [\r\n                        BX.create({\r\n                            tag: this.application.initParams.textBlocks[key][\"type\"] ? 'input' : 'textarea',\r\n                            attrs: this.getTextInputAttrs(this.application.initParams.textBlocks[key])\r\n                        })\r\n                    ]\r\n                }),\r\n            );\r\n        }\r\n\r\n        return arNodes;\r\n    }\r\n\r\n    getTextInputAttrs(attrs) {\r\n        const preparedAttrs = {}\r\n        for(const attr in attrs)\r\n        {\r\n            if (attrs.hasOwnProperty(attr))\r\n            {\r\n                if (attr === \"class\")\r\n                {\r\n                    preparedAttrs.className = this.styles[ attrs[attr] ];\r\n                }\r\n                else\r\n                {\r\n                    preparedAttrs[attr] = attrs[attr];\r\n                }\r\n            }\r\n        }\r\n        return preparedAttrs;\r\n    }\r\n\r\n    /**\r\n     * Create start button elements\r\n     * @returns {div}\r\n     */\r\n    getDefaultStartBtn() {\r\n        return BX.create('div', {\r\n            attrs: {\r\n                id: this.application.selectors.startBtnWrapId,\r\n                className: this.styles['appointment-button-wrapper']\r\n            },\r\n            children: [\r\n                BX.create('button', {\r\n                    attrs: {\r\n                        id: this.application.selectors.startBtnId,\r\n                    },\r\n                    children: [\r\n                        BX.create('span', {\r\n                            text: BX.message('FIRSTBIT_JS_START_BTN_TEXT')\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    getDivElement(id) {\r\n        return BX.create('div', {\r\n            attrs: {\r\n                id: id\r\n            }\r\n        });\r\n    }\r\n\r\n    getConfirmationBlock(orderData)\r\n    {\r\n        const confirmWarningNode = BX.create('p', {\r\n            attrs: {\r\n                className: styles['appointment-warning-text']\r\n            }\r\n        });\r\n\r\n        const confirmInputNode = BX.create('input', {\r\n            attrs: {\r\n                type: 'number',\r\n                className: this.styles['appointment-form_input'],\r\n                placeholder: BX.message(\"FIRSTBIT_JS_CONFIRM_CODE_MESSAGE\"),\r\n                required: 'true',\r\n                autocomplete: 'new-password',\r\n            },\r\n            events: {\r\n                input: (e) => {\r\n                    if (e.target?.value?.length > 4){\r\n                        e.target.value = e.target.value.substring(0, 4);\r\n                    }\r\n                }\r\n            },\r\n        });\r\n\r\n        const confirmSubmitBtn = BX.create('div', {\r\n            attrs: {\r\n                className: styles['appointment-form-button-wrapper']\r\n            },\r\n            children: [\r\n                BX.create('button', {\r\n                    attrs: {\r\n                        className: styles['appointment-form-button'],\r\n                        type: 'button'\r\n                    },\r\n                    text: BX.message(\"FIRSTBIT_JS_SEND_BTN_TEXT\"),\r\n                    events: {\r\n                        click: (e) => {\r\n                            if (confirmInputNode && confirmWarningNode){\r\n                                confirmWarningNode.textContent = '';\r\n                                if (confirmInputNode.value && confirmInputNode.value.length === 4){\r\n                                    this.application.form.classList.add(styles['sending']);\r\n                                    this.application.verifyConfirmCode(confirmInputNode.value, orderData, confirmWarningNode, e.target);\r\n                                }\r\n                                else\r\n                                {\r\n                                    if (!confirmInputNode.value || (confirmInputNode.value.length !== 4)){\r\n                                        confirmWarningNode.textContent = BX.message(\"FIRSTBIT_JS_CONFIRM_CODE_LENGTH\");\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    },\r\n                }),\r\n            ]\r\n        });\r\n\r\n        const confirmRepeatBtn = BX.create('a', {\r\n            attrs: {\r\n                className: styles['appointment-form-button-link'],\r\n                href: \"#\"\r\n            }\r\n        });\r\n\r\n        const confirmWrapper = BX.create('div', {\r\n            attrs: {\r\n                id: this.application.selectors.confirmWrapperId,\r\n                style: \"width: 100%\",\r\n            },\r\n            children: [\r\n                BX.create('label', {\r\n                    attrs: {\r\n                        className: styles['appointment-form_input-wrapper'],\r\n                    },\r\n                    children: [\r\n                        confirmInputNode\r\n                    ]\r\n                }),\r\n                confirmWarningNode,\r\n                confirmSubmitBtn,\r\n                confirmRepeatBtn,\r\n            ]\r\n        });\r\n\r\n        const curTimeSeconds: number = Number(((new Date()).getTime() / 1000).toFixed(0));\r\n        let remainingTime = this.application.timeExpires - curTimeSeconds;\r\n\r\n        const interval = setInterval(() => {\r\n            if (remainingTime <= 0)\r\n            {\r\n                confirmRepeatBtn.addEventListener('click', (e) => {\r\n                    e.preventDefault();\r\n                    this.application.sendConfirmCode(orderData);\r\n                });\r\n                clearInterval(interval);\r\n            }\r\n            else\r\n            {\r\n                remainingTime--;\r\n                confirmRepeatBtn.textContent = `${BX.message(\"FIRSTBIT_JS_CONFIRM_CODE_SEND_AGAIN\")} \r\n                                         ${remainingTime > 0 ? remainingTime : ''}`;\r\n            }\r\n        }, 1000);\r\n\r\n        return confirmWrapper;\r\n    }\r\n}","//@flow\r\ntype ETextInputNames = | \"name\" | \"middleName\" | \"surname\" | \"phone\" | \"email\" | \"birthday\" | \"comment\";\r\ntype EIllegalAttributes = \"data-required\" | \"aria-autocomplete\";\r\n\r\ninterface ITextInputNames{\r\n    name: string,\r\n    middleName: string,\r\n    surname: string,\r\n    phone: string,\r\n    email: string,\r\n    birthday: string,\r\n    comment: string\r\n}\r\n\r\nexport const TextInputNames: ITextInputNames = {\r\n    name: \"name\",\r\n    middleName: \"middleName\",\r\n    surname: \"surname\",\r\n    phone: \"phone\",\r\n    email: \"email\",\r\n    birthday: \"birthday\",\r\n    comment: \"comment\"\r\n};\r\n\r\nexport interface ITextObject {\r\n    type?: string,\r\n    placeholder: string,\r\n    id: string,\r\n    maxlength: string,\r\n    class: string,\r\n    name: ETextInputNames,\r\n    [key: EIllegalAttributes]: string,\r\n    autocomplete?: string,\r\n}","// @disabled-flow\r\n'use strict';\r\nimport styles from \"../../styles/app.scss\";\r\nimport {convertHexToHsl} from \"../utils/functions\";\r\nimport \"date\";\r\nimport {EventManager} from \"../utils/eventManager\";\r\nimport {Renderer} from \"../utils/renderer\";\r\nimport type {ITextObject} from \"../../types/params\";\r\nimport {TextInputNames} from \"../../types/params\";\r\n\r\nexport class AppointmentSteps\r\n{\r\n    step: string                  = '';\r\n    phoneMask: string             = '+7(000)000-00-00';\r\n    loaded: boolean               = false;\r\n    timeExpires: number           = 0;\r\n    requiredInputs: HTMLElement[] = [];\r\n    initParams: any               = {};\r\n    eventHandlersAdded            = {};\r\n    dataKeys = {\r\n        clinicsKey: \"clinic\",\r\n        specialtiesKey: \"specialty\",\r\n        employeesKey: \"doctor\",\r\n        servicesKey: \"service\",\r\n        scheduleKey: \"schedule\",\r\n    };\r\n    data = {\r\n        clinics: [],\r\n        employees: {},\r\n        services: {},\r\n        schedule: []\r\n    };\r\n    selectionBlocks = {};\r\n    selectionNodes = {};\r\n    textNodes = {};\r\n    defaultText = {};\r\n    isUpdate = false;//not used now, but this app prepared to make ability to update current records from public interface\r\n\r\n    /**\r\n     * AppointmentSteps constructor\r\n     * @param params\r\n     */\r\n    constructor(params)\r\n    {\r\n        this.firstInit      = true;\r\n        this.initParams     = params;\r\n        this.selectors      = this.getAppSelectors(styles);\r\n        this.selectionSteps = Object.values(this.dataKeys);\r\n\r\n        this.useServices \t\t\t\t\t= (params.useServices === \"Y\");\r\n        this.selectDoctorBeforeService \t\t= (params.selectDoctorBeforeService === \"Y\");\r\n        this.useTimeSteps \t\t\t\t\t= (params.useTimeSteps === \"Y\");\r\n        this.timeStepDurationMinutes\t\t= Number(params.timeStepDurationMinutes);\r\n        this.strictCheckingOfRelations\t\t= (params.strictCheckingOfRelations === \"Y\");\r\n        this.showDoctorsWithoutDepartment\t= (params.showDoctorsWithoutDepartment === \"Y\");\r\n        this.confirmTypes                   = params.confirmTypes;\r\n        this.useConfirmWith                 = (params.useConfirmWith);\r\n        this.useEmailNote                   = (params.useEmailNote === \"Y\");\r\n\r\n        this.useCustomMainBtn = (params.useCustomMainBtn === \"Y\");\r\n        this.customColors     = params.customColors ?? {};\r\n\r\n        this.filledInputs = {\r\n            [this.dataKeys.clinicsKey]: {\r\n                clinicUid: false,\r\n                clinicName: false,\r\n            },\r\n            [this.dataKeys.specialtiesKey]: {\r\n                specialty: false,\r\n                specialtyUid: false,\r\n            },\r\n            [this.dataKeys.servicesKey]: {\r\n                serviceUid: false,\r\n                serviceName: false,\r\n                serviceDuration: false,\r\n            },\r\n            [this.dataKeys.employeesKey]: {\r\n                refUid: false,\r\n                doctorName: false,\r\n            },\r\n            [this.dataKeys.scheduleKey]: {\r\n                orderDate: false,\r\n                timeBegin: false,\r\n                timeEnd: false,\r\n            },\r\n            textValues: {\r\n                name: \t\tthis.filledInputs?.textValues?.name       ?? false,\r\n                surname: \tthis.filledInputs?.textValues?.surname    ?? false,\r\n                middleName: this.filledInputs?.textValues?.middleName ?? false,\r\n                phone: \t\tthis.filledInputs?.textValues?.phone      ?? false,\r\n                address: \tthis.filledInputs?.textValues?.address    ?? false,\r\n                email: \t    this.filledInputs?.textValues?.email      ?? false,\r\n                birthday:   this.filledInputs?.textValues?.birthday   ?? false,\r\n                comment: \tthis.filledInputs?.textValues?.comment    ?? false,\r\n            },\r\n        }\r\n\r\n        this.prepareSelectionBlocksForRender();\r\n        this.renderer = new Renderer(styles, this);\r\n    }\r\n\r\n    /**\r\n     * create js objects that contains html ids and default textContent for selection blocks\r\n     * this objects will be used for creating selection blocks html\r\n     */\r\n    prepareSelectionBlocksForRender(){\r\n        this.selectionSteps.forEach(step => {\r\n            this.selectionBlocks[step] = {\r\n                \"blockId\":      `app_${step}_block`,\r\n                \"listId\":       `app_${step}_list`,\r\n                \"selectedId\":   `app_${step}_selected`,\r\n                \"inputId\":      `app_${step}_value`,\r\n                \"isRequired\":   !(step === this.dataKeys.servicesKey && this.initParams.useServices !== \"Y\")\r\n            }\r\n            this.defaultText[step] = BX.message(`FIRSTBIT_JS_APPOINTMENT_SELECT_${step.toUpperCase()}_TEXT`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * start application\r\n     */\r\n    run() {\r\n        this.checkRoot();\r\n        this.insertAppHtml();\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * check root selector and creates it if needed\r\n     */\r\n    checkRoot(){\r\n        if (!this.root || !BX.type.isDomNode(this.root))\r\n        {\r\n            this.root = this.renderer.getDivElement(this.selectors.rootNodeId);\r\n            BX.append(this.root, document.body);\r\n        }\r\n        else\r\n        {\r\n            BX.cleanNode(this.root);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * build basic html skeleton and insert it to DOM\r\n     */\r\n    insertAppHtml(){\r\n        BX.append(\r\n            this.renderer.getAppHtmlSkeleton(),\r\n            this.root\r\n        );\r\n\r\n        !this.useCustomMainBtn && BX.append(this.renderer.getDefaultStartBtn(), this.root);\r\n    }\r\n\r\n    /**\r\n     * start all application actions\r\n     */\r\n    init(){\r\n        try {\r\n            this.initCustomEvents();\r\n            this.initStartBtn();\r\n            this.initBaseNodes();\r\n            this.initOverlayAction();\r\n            this.initForm();\r\n            this.initMobileCloseBtn();\r\n            this.initSelectionNodes();\r\n            this.initTextNodes();\r\n            this.addPhoneMasks();\r\n            this.addCalendarSelection();\r\n            this.addCustomColors();\r\n        }\r\n        catch (e) {\r\n            this.logResultErrors(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * subscribing on custom js events\r\n     */\r\n    initCustomEvents(){\r\n        EventManager.subscribe(EventManager.fullDataLoaded, () => {\r\n            this.startRender();\r\n        })\r\n    }\r\n\r\n    /**\r\n     * find or create start button and add event handler for click\r\n     */\r\n    initStartBtn() {\r\n        if(!this.firstInit && this.useCustomMainBtn){\r\n            return;\r\n        }\r\n        const startBtnId = this.useCustomMainBtn ? this.initParams.customMainBtnId : this.selectors.startBtnId;\r\n        this.startBtn = BX(startBtnId);\r\n        if (BX.type.isDomNode(this.startBtn))\r\n        {\r\n            EventManager.bind(this.startBtn, 'click', this.togglePopup.bind(this));\r\n        }\r\n        else\r\n        {\r\n            throw new Error(`${BX.message('FIRSTBIT_JS_NODE_NOT_FOUND')} \"${this.initParams.customMainBtnId}\"`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * find all base nodes and save them to this object props\r\n     */\r\n    initBaseNodes() {\r\n        this.overlay        = BX(this.selectors.overlayId);\r\n        this.startBtnWrap   = BX(this.selectors.startBtnWrapId);\r\n        this.mobileCloseBtn = BX(this.selectors.mobileCloseBtnId);\r\n        this.messageNode    = BX(this.selectors.messageNodeId);\r\n        this.submitBtn      = BX(this.selectors.submitBtnId);\r\n        this.resultBlock    = BX(this.selectors.appResultBlockId);\r\n    }\r\n\r\n    /**\r\n     * make popup hidden by click to overlay\r\n     */\r\n    initOverlayAction() {\r\n        if (BX.type.isDomNode(this.overlay))\r\n        {\r\n            EventManager.bind(this.overlay, 'click', (e) => {\r\n                if (e.target?.getAttribute('id') === this.selectors.overlayId){\r\n                    this.togglePopup();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * find form node and add event listeners\r\n     */\r\n    initForm() {\r\n        this.form = BX(this.selectors.formId);\r\n        if (this.form)\r\n        {\r\n            EventManager.bind(this.form, 'submit', this.submit.bind(this));\r\n        }\r\n        else\r\n        {\r\n            throw new Error(`${BX.message('FIRSTBIT_JS_NODE_NOT_FOUND')} ${this.selectors.formId}`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * find node and add event listener to close form\r\n     */\r\n    initMobileCloseBtn() {\r\n        if (this.mobileCloseBtn)\r\n        {\r\n            EventManager.bind(this.mobileCloseBtn, 'click', this.togglePopup.bind(this))\r\n        }\r\n        else\r\n        {\r\n            throw new Error(`${BX.message('FIRSTBIT_JS_NODE_NOT_FOUND')} ${this.selectors.mobileCloseBtnId}`)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * find nodes and save their data to this object\r\n     */\r\n    initSelectionNodes() {\r\n        for (const key in this.selectionBlocks)\r\n        {\r\n            if (this.selectionBlocks.hasOwnProperty(key))\r\n            {\r\n                this.selectionNodes[key] = {\r\n                    blockNode: \t\tBX(this.selectionBlocks[key].blockId),\r\n                    listNode: \t\tBX(this.selectionBlocks[key].listId),\r\n                    selectedNode: \tBX(this.selectionBlocks[key].selectedId),\r\n                    inputNode: \t\tBX(this.selectionBlocks[key].inputId),\r\n                }\r\n\r\n                if (this.selectionBlocks[key].isRequired)\r\n                {\r\n                    this.requiredInputs.push(this.selectionNodes[key].inputNode);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * find nodes, add actions and save their data to this object\r\n     */\r\n    initTextNodes() {\r\n        this.initParams.textBlocks.forEach((block: ITextObject) => {\r\n            const input = BX(block.id);\r\n            if (!input){\r\n                throw new Error(`${BX.message(\"FIRSTBIT_JS_NODE_NOT_FOUND\")} ${block.id}`);\r\n            }\r\n\r\n            const currentValue = this.filledInputs.textValues[block.name];\r\n            input.value = currentValue ? currentValue : '';\r\n            if (input && currentValue && (block.name === TextInputNames.birthday)){\r\n                const date = new Date(currentValue);\r\n                input.value = this.convertDateToDisplay(date.getTime(), false, true);\r\n            }\r\n\r\n            EventManager.bind(input, 'input', (e)=> {\r\n                let val: string = e.target.value ?? '';\r\n                if (e.target.name === TextInputNames.phone && val.length > this.phoneMask.length){\r\n                    val = val.substring(0, this.phoneMask.length)\r\n                }\r\n                this.filledInputs.textValues[block.name] = val;\r\n            })\r\n\r\n            if (block[\"data-required\"] === \"true\")\r\n            {\r\n                this.requiredInputs.push(input);\r\n            }\r\n            else\r\n            {\r\n                if ((this.useConfirmWith === this.confirmTypes.email) && (block.name === TextInputNames.email))\r\n                {\r\n                    this.requiredInputs.push(input);\r\n                }\r\n            }\r\n\r\n            this.textNodes[block.name] = {\r\n                inputNode: input,\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * loading data from 1c and build selectors html\r\n     */\r\n    start() {\r\n        this.toggleLoader(true);\r\n        this.loadData()\r\n            .then(() => {\r\n                this.loaded = true;\r\n            })\r\n            .catch(res => {\r\n                !this.useCustomMainBtn && this.startBtnWrap.classList.add(styles['hidden']);\r\n                this.logResultErrors(res);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * sequentially loads data from 1c\r\n     * @returns {Promise<any>}\r\n     */\r\n    async loadData(){\r\n        const clinicsResponse = await this.getListClinic();\r\n\r\n        if (clinicsResponse.data?.error)\r\n        {\r\n            return Promise.reject(clinicsResponse.data?.error)\r\n        }\r\n        else\r\n        {\r\n            if (clinicsResponse.data?.length > 0)\r\n            {\r\n                this.data.clinics = clinicsResponse.data;\r\n\r\n                const employeesResponse = await this.getListEmployees();\r\n\r\n                if (employeesResponse.data?.error)\r\n                {\r\n                    return Promise.reject(employeesResponse.data?.error)\r\n                }\r\n                else\r\n                {\r\n                    if (Object.keys(employeesResponse.data).length > 0)\r\n                    {\r\n                        this.data.employees = employeesResponse.data;\r\n                        const scheduleResponse = await this.getSchedule();\r\n\r\n                        if (scheduleResponse.data?.error)\r\n                        {\r\n                            return Promise.reject(scheduleResponse.data?.error)\r\n                        }\r\n                        else\r\n                        {\r\n                            if (scheduleResponse.data?.hasOwnProperty(\"schedule\"))\r\n                            {\r\n                                this.data.schedule = scheduleResponse.data.schedule;\r\n                                EventManager.emit(EventManager.fullDataLoaded);\r\n                                return Promise.resolve();\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        return Promise.reject(BX.message(\"FIRSTBIT_JS_DOCTORS_NOT_FOUND_ERROR\"))\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                return Promise.reject(BX.message(\"FIRSTBIT_JS_CLINICS_NOT_FOUND_ERROR\"))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Load clinics list from 1c\r\n     * @returns {Promise<any>}\r\n     */\r\n    getListClinic(){\r\n        return BX.ajax.runAction('firstbit:appointment.oneCController.getClinics', {\r\n            data: {\r\n                sessid: BX.bitrix_sessid()\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load employees list from 1c\r\n     * @returns {Promise<any>}\r\n     */\r\n    getListEmployees(){\r\n        return BX.ajax.runAction('firstbit:appointment.oneCController.getEmployees', {\r\n            data: {\r\n                sessid: BX.bitrix_sessid()\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load doctor's schedule from 1c\r\n     * @returns {Promise<any>}\r\n     */\r\n    getSchedule(){\r\n        return BX.ajax.runAction('firstbit:appointment.oneCController.getSchedule', {\r\n            data: {\r\n                sessid: BX.bitrix_sessid()\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Load nomenclature list from 1c\r\n     * @param clinicGuid\r\n     * @returns {Promise<any>}\r\n     */\r\n    getListNomenclature(clinicGuid){\r\n        return BX.ajax.runAction('firstbit:appointment.oneCController.getNomenclature', {\r\n            data: {\r\n                sessid: BX.bitrix_sessid(),\r\n                clinicGuid: clinicGuid,\r\n            }\r\n        });\r\n    }\r\n\r\n    startRender(){\r\n        const clinicsRendered = this.renderClinicList();\r\n        if (clinicsRendered)\r\n        {\r\n            if (this.isUpdate === \"Y\")\r\n            {\r\n                for (const dataKey in this.filledInputs) {\r\n                    if (this.filledInputs.hasOwnProperty(dataKey)\r\n                        && this.selectionNodes.hasOwnProperty(dataKey))\r\n                    {\r\n                        this.filledInputs[dataKey] = JSON.parse(this.selectionNodes[dataKey].inputNode.value);\r\n                    }\r\n                }\r\n                this.renderSpecialtiesList();\r\n                this.renderEmployeesList();\r\n                this.renderScheduleList();\r\n            }\r\n            setTimeout(() => {\r\n                this.toggleLoader(false);\r\n            }, 300)\r\n        }\r\n        else\r\n        {\r\n            throw new Error(BX.message(\"FIRSTBIT_JS_CLINICS_RENDER_ERROR\"));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * render clinics list\r\n     * @returns {boolean}\r\n     */\r\n    renderClinicList(){\r\n        let rendered = false;\r\n        if(this.data.clinics.length)\r\n        {\r\n            if (this.selectionNodes.hasOwnProperty(this.dataKeys.clinicsKey))\r\n            {\r\n                const clinicsList = this.selectionNodes[this.dataKeys.clinicsKey].listNode;\r\n                BX.cleanNode(clinicsList);\r\n                this.data.clinics.forEach((clinic) => {\r\n                    if (clinic.uid)\r\n                    {\r\n                        BX.append(BX.create('li', {\r\n                            dataset: {\r\n                                uid: clinic.uid,\r\n                                name: clinic.name,\r\n                            },\r\n                            text: clinic.name\r\n                        }), clinicsList);\r\n                    }\r\n                    else\r\n                    {\r\n                        throw new Error(`${BX.message(\"FIRSTBIT_JS_OBJECT_UID_ERROR\")} ${clinic.name}`);\r\n                    }\r\n                });\r\n                this.addItemActions(this.dataKeys.clinicsKey);\r\n                rendered = true;\r\n            }\r\n            else\r\n            {\r\n                throw new Error(BX.message('FIRSTBIT_JS_CLINICS_NODE_NOT_FOUND_ERROR'));\r\n            }\r\n        }else{\r\n            throw new Error(BX.message('FIRSTBIT_JS_CLINICS_NOT_FOUND_ERROR'));\r\n        }\r\n        return rendered;\r\n    }\r\n\r\n    renderSpecialtiesList(){\r\n        if (this.selectionNodes.hasOwnProperty(this.dataKeys.specialtiesKey))\r\n        {\r\n            const specialtiesList = this.selectionNodes[this.dataKeys.specialtiesKey].listNode;\r\n            BX.cleanNode(specialtiesList);\r\n\r\n            if(Object.keys(this.data.employees).length > 0)\r\n            {\r\n                for (let uid in this.data.employees)\r\n                {\r\n                    if (this.data.employees.hasOwnProperty(uid))\r\n                    {\r\n                        const clinicCondition = (this.filledInputs[this.dataKeys.clinicsKey].clinicUid === this.data.employees[uid].clinicUid);\r\n                        let canRender = true;\r\n                        if(this.strictCheckingOfRelations){\r\n                            canRender = clinicCondition;\r\n                            if (this.showDoctorsWithoutDepartment){\r\n                                canRender = clinicCondition || !this.data.employees[uid].clinicUid;\r\n                            }\r\n                        }\r\n\r\n                        if (canRender && this.data.employees[uid]['specialty'])\r\n                        {\r\n                            const specialty = this.data.employees[uid]['specialty'];\r\n                            const specialtyUid = this.createIdFromName(specialty);\r\n\r\n                            const alreadyRendered = specialtiesList.querySelector(`[data-uid=\"${specialtyUid}\"]`);\r\n                            if (!alreadyRendered)\r\n                            {\r\n                                BX.append(BX.create('li', {\r\n                                    dataset: {\r\n                                        uid: specialtyUid,\r\n                                        name: specialty,\r\n                                    },\r\n                                    text: specialty\r\n                                }), specialtiesList);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (specialtiesList.children.length === 0){\r\n                    BX.append(BX.create('span', {\r\n                        attrs: {\r\n                            className: styles[\"empty-selection-message\"]\r\n                        },\r\n                        text: BX.message('FIRSTBIT_JS_SPECIALTIES_NOT_FOUND_ERROR')\r\n                    }), specialtiesList);\r\n                }\r\n                this.addItemActions(this.dataKeys.specialtiesKey);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            throw new Error(BX.message('FIRSTBIT_JS_SPECIALTIES_NODE_NOT_FOUND_ERROR'));\r\n        }\r\n    }\r\n\r\n    renderServicesList(){\r\n        if (this.selectionNodes.hasOwnProperty(this.dataKeys.servicesKey))\r\n        {\r\n            const servicesList = this.selectionNodes[this.dataKeys.servicesKey].listNode;\r\n            BX.cleanNode(servicesList);\r\n\r\n            if(Object.keys(this.data.services).length > 0)\r\n            {\r\n                for (let uid in this.data.services)\r\n                {\r\n                    if (!this.data.services.hasOwnProperty(uid)){\r\n\r\n                    }\r\n\r\n                    let renderCondition = (this.filledInputs[this.dataKeys.specialtiesKey].specialtyUid\r\n                        === this.data.services[uid].specialtyUid);\r\n                    if (this.selectDoctorBeforeService)\r\n                    {\r\n                        const selectedEmployeeUid = this.filledInputs[this.dataKeys.employeesKey].refUid;\r\n                        renderCondition = renderCondition && this.data.employees[selectedEmployeeUid].services.hasOwnProperty(uid);\r\n                    }\r\n\r\n                    if (renderCondition)\r\n                    {\r\n                        let price = Number((this.data.services[uid]['price']).replace(/\\s+/g, ''));\r\n\r\n                        if (this.data.services.hasOwnProperty(uid)){\r\n                            BX.append(BX.create('li', {\r\n                                dataset: {\r\n                                    uid: uid,\r\n                                    duration: this.data.services[uid].duration,\r\n                                },\r\n                                children: [\r\n                                    BX.create('p', {\r\n                                        html:  `${this.data.services[uid].name}<br>\r\n                                                ${price>0 ? \"<b>\"+price+\"</b>&#8381;\" : \"\"}`\r\n                                    })\r\n                                ]\r\n                            }), servicesList);\r\n                        }\r\n                    }\r\n                }\r\n                if (servicesList.children.length === 0){\r\n                    BX.append(BX.create('span', {\r\n                        attrs: {\r\n                            className: styles[\"empty-selection-message\"]\r\n                        },\r\n                        text: BX.message('FIRSTBIT_JS_SERVICES_NOT_FOUND_ERROR')\r\n                    }), servicesList);\r\n                }\r\n                this.addItemActions(this.dataKeys.servicesKey);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            throw new Error(BX.message('FIRSTBIT_JS_SERVICES_NODE_NOT_FOUND_ERROR'));\r\n        }\r\n    }\r\n\r\n    renderEmployeesList() {\r\n        if (this.selectionNodes.hasOwnProperty(this.dataKeys.employeesKey))\r\n        {\r\n            const empList = this.selectionNodes[this.dataKeys.employeesKey].listNode;\r\n            empList.innerHTML = '';\r\n\r\n            if(Object.keys(this.data.employees).length > 0) {\r\n                for (let uid in this.data.employees)\r\n                {\r\n                    if (this.data.employees.hasOwnProperty(uid))\r\n                    {\r\n                        const selectedSpecialty = this.filledInputs[this.dataKeys.specialtiesKey].specialty;\r\n                        const selectedClinic = this.filledInputs[this.dataKeys.clinicsKey].clinicUid;\r\n                        const specialtyCondition = this.data.employees[uid]['specialty'] === selectedSpecialty;\r\n                        const clinicCondition = selectedClinic === this.data.employees[uid].clinicUid;\r\n\r\n                        let canRender = specialtyCondition;\r\n\r\n                        if(this.strictCheckingOfRelations){\r\n                            if (this.showDoctorsWithoutDepartment){\r\n                                canRender = (specialtyCondition && !this.data.employees[uid].clinicUid)\r\n                                    ||\r\n                                    (specialtyCondition && clinicCondition);\r\n                            }\r\n                            else\r\n                            {\r\n                                canRender = specialtyCondition && clinicCondition;\r\n                            }\r\n                        }\r\n\r\n                        if (canRender)\r\n                        {\r\n                            if (this.useServices && !this.selectDoctorBeforeService)\r\n                            {\r\n                                const selectedServiceUid = this.filledInputs[this.dataKeys.servicesKey].serviceUid;\r\n                                if (!this.data.employees[uid].services.hasOwnProperty(selectedServiceUid)){\r\n                                    continue;\r\n                                }\r\n                            }\r\n                            BX.append(BX.create('li', {\r\n                                dataset: {\r\n                                    uid: uid,\r\n                                },\r\n                                text:  `${this.data.employees[uid].surname} ${this.data.employees[uid].name} ${this.data.employees[uid].middleName}`\r\n                            }), empList);\r\n                        }\r\n                    }\r\n                }\r\n                if (empList.children.length === 0){\r\n                    BX.append(BX.create('span', {\r\n                        attrs: {\r\n                            className: styles[\"empty-selection-message\"]\r\n                        },\r\n                        text: BX.message('FIRSTBIT_JS_DOCTORS_PARAMS_NOT_FOUND_ERROR')\r\n                    }), empList);\r\n                }\r\n                this.addItemActions(this.dataKeys.employeesKey);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            throw new Error(BX.message('FIRSTBIT_JS_DOCTORS_NODE_NOT_FOUND_ERROR'));\r\n        }\r\n    }\r\n\r\n    renderScheduleList() {\r\n        if (this.data.schedule.length)\r\n        {\r\n            const scheduleList = this.selectionNodes[this.dataKeys.scheduleKey].listNode;\r\n            scheduleList.classList.add(styles[\"column-mode\"]);\r\n            BX.cleanNode(scheduleList);\r\n\r\n            this.data.schedule.forEach((employeeSchedule) => {\r\n                if (\r\n                    employeeSchedule.clinicUid === this.filledInputs[this.dataKeys.clinicsKey].clinicUid\r\n                    && employeeSchedule.refUid === this.filledInputs[this.dataKeys.employeesKey].refUid\r\n                )\r\n                {\r\n                    const selectedEmployee = this.data.employees[employeeSchedule.refUid];\r\n                    const selectedService = this.filledInputs[this.dataKeys.servicesKey];\r\n                    let serviceDuration = Number(selectedService.serviceDuration);\r\n                    if(selectedEmployee.services.hasOwnProperty(selectedService.serviceUid))\r\n                    {\r\n                        if (selectedEmployee.services[selectedService.serviceUid].hasOwnProperty(\"personalDuration\")){\r\n                            const personalDuration = selectedEmployee.services[selectedService.serviceUid][\"personalDuration\"];\r\n                            serviceDuration = Number(personalDuration) > 0 ? Number(personalDuration) : serviceDuration;\r\n                        }\r\n                    }\r\n                    const renderCustomIntervals = this.useServices && (serviceDuration > 0);\r\n                    const timeKey = renderCustomIntervals ? \"freeNotFormatted\" : \"free\";\r\n\r\n                    if (employeeSchedule.timetable[timeKey].length)\r\n                    {\r\n                        let intervals = employeeSchedule.timetable[timeKey];\r\n\r\n                        if (renderCustomIntervals)\r\n                        {\r\n                            const customIntervals = this.getIntervalsForServiceDuration(intervals, serviceDuration*1000);\r\n\r\n                            if (customIntervals.length === 0)\r\n                            {\r\n                                BX.append(BX.create('span', {\r\n                                    attrs: {\r\n                                        className: styles[\"empty-selection-message\"]\r\n                                    },\r\n                                    text: BX.message('FIRSTBIT_JS_SCHEDULE_FREE_TIME_NOT_FOUND')\r\n                                }), scheduleList);\r\n\r\n                                return;\r\n                            }\r\n                            else\r\n                            {\r\n                                intervals = customIntervals;\r\n                            }\r\n                        }\r\n\r\n                        let renderDate;\r\n                        let renderColumn = undefined;\r\n                        intervals.forEach((day, index) => {\r\n                            const isLast = (index === (intervals.length - 1));\r\n                            if ((day.date !== renderDate) || isLast)\r\n                            {\r\n                                renderColumn ? scheduleList.append(renderColumn) : void(0);\r\n                                !isLast || (intervals.length === 1) ? renderColumn = this.createDayColumn(day) : void(0);\r\n                                renderDate = day.date;\r\n                            }\r\n\r\n                            if (renderColumn)\r\n                            {\r\n                                BX.append(BX.create('span', {\r\n                                    dataset: {\r\n                                        displayDate: `${day['formattedDate']} `,\r\n                                        date:         day.date,\r\n                                        start:        day.timeBegin,\r\n                                        end:          day.timeEnd,\r\n                                    },\r\n                                    text: `${day['formattedTimeBegin']}`\r\n                                }), renderColumn);\r\n                            }\r\n                        });\r\n                    }else{\r\n                        BX.append(BX.create('span', {\r\n                            attrs: {\r\n                                className: styles[\"empty-selection-message\"]\r\n                            },\r\n                            text: BX.message('FIRSTBIT_JS_SCHEDULE_FREE_TIME_NOT_FOUND')\r\n                        }), scheduleList);\r\n                    }\r\n                }\r\n            });\r\n            if (scheduleList.children.length === 0){\r\n                BX.append(BX.create('span', {\r\n                    attrs: {\r\n                        className: styles[\"empty-selection-message\"]\r\n                    },\r\n                    text: BX.message('FIRSTBIT_JS_SCHEDULE_FREE_TIME_NOT_FOUND')\r\n                }), scheduleList);\r\n            }\r\n            this.addHorizontalScrollButtons();\r\n            this.addItemActions(this.dataKeys.scheduleKey);\r\n        }\r\n        else\r\n        {\r\n            throw new Error(BX.message('FIRSTBIT_JS_SCHEDULE_NOT_FOUND_ERROR'));\r\n        }\r\n    }\r\n\r\n    getIntervalsForServiceDuration(intervals, serviceDurationMs) {\r\n        const newIntervals = [];\r\n        intervals.length && intervals.forEach((day) => {\r\n            const timestampTimeBegin = (new Date(day.timeBegin)).getTime();\r\n            const timestampTimeEnd = (new Date(day.timeEnd)).getTime();\r\n            const timeDifference = timestampTimeEnd - timestampTimeBegin;\r\n            const appointmentsCount = Math.floor(timeDifference / serviceDurationMs);\r\n            if (appointmentsCount > 0)\r\n            {\r\n                if (this.useTimeSteps && (serviceDurationMs >= 30*60*1000)) //use timeSteps only for services with duration>=30 minutes\r\n                {\r\n                    let start   = new Date(timestampTimeBegin);\r\n                    let end     = new Date(timestampTimeBegin + serviceDurationMs);\r\n                    while(end.getTime() <= timestampTimeEnd){\r\n                        newIntervals.push({\r\n                            \"date\": \t\t\t\tday.date,\r\n                            \"timeBegin\": \t\t\tthis.convertDateToISO(Number(start)),\r\n                            \"timeEnd\": \t\t\t\tthis.convertDateToISO(Number(end)),\r\n                            \"formattedDate\": \t\tthis.convertDateToDisplay(Number(start), false),\r\n                            \"formattedTimeBegin\": \tthis.convertDateToDisplay(Number(start), true),\r\n                            \"formattedTimeEnd\": \tthis.convertDateToDisplay(Number(end), true),\r\n                        });\r\n                        start.setMinutes(start.getMinutes() + this.timeStepDurationMinutes);\r\n                        end.setMinutes(end.getMinutes() + this.timeStepDurationMinutes);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    for (let i = 0; i < appointmentsCount; i++)\r\n                    {\r\n                        let start = Number(new Date(timestampTimeBegin + (serviceDurationMs * i)));\r\n                        let end = Number(new Date(timestampTimeBegin + (serviceDurationMs * (i+1))));\r\n                        newIntervals.push({\r\n                            \"date\": \t\t\t\tday.date,\r\n                            \"timeBegin\": \t\t\tthis.convertDateToISO(start),\r\n                            \"timeEnd\": \t\t\t\tthis.convertDateToISO(end),\r\n                            \"formattedDate\": \t\tthis.convertDateToDisplay(start, false),\r\n                            \"formattedTimeBegin\": \tthis.convertDateToDisplay(start, true),\r\n                            \"formattedTimeEnd\": \tthis.convertDateToDisplay(end, true),\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        return newIntervals;\r\n    }\r\n\r\n    createDayColumn(day){\r\n        const date = this.readDateInfo(day.timeBegin);\r\n\r\n        return BX.create('li', {\r\n            children: [\r\n                BX.create('p', {\r\n                    text: `${date.weekDay}\r\n                        ${day['formattedDate']}`\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    addHorizontalScrollButtons(){\r\n        const scroller = this.selectionNodes[this.dataKeys.scheduleKey].listNode;\r\n        const item = scroller.querySelector('li');\r\n\r\n        if (scroller && item){\r\n            const itemWidth = scroller.querySelector('li').clientWidth;\r\n\r\n            BX.append(BX.create('div', {\r\n                attrs: {\r\n                    className: styles[\"horizontal-scroll-buttons\"]\r\n                },\r\n                children: [\r\n                    BX.create('button', {\r\n                        attrs: {\r\n                            type: \"button\"\r\n                        },\r\n                        text: \"<\",\r\n                        events: {\r\n                            click: () => {\r\n                                if (scroller.scrollLeft !== 0) {\r\n                                    scroller.scrollBy({ left: -itemWidth*3, top: 0, behavior: 'smooth' });\r\n                                } else {\r\n                                    scroller.scrollTo({ left: scroller.scrollWidth, top: 0, behavior: 'smooth' });\r\n                                }\r\n                            }\r\n                        },\r\n                    }),\r\n                    BX.create('button', {\r\n                        attrs: {\r\n                            type: \"button\"\r\n                        },\r\n                        text: \">\",\r\n                        events: {\r\n                            click: () => {\r\n                                if (scroller.scrollLeft < (scroller.scrollWidth - itemWidth*3 - 10)) {\r\n                                    scroller.scrollBy({ left: itemWidth*3, top: 0, behavior: 'smooth' });\r\n                                } else {\r\n                                    scroller.scrollTo({ left: 0, top: 0, behavior: 'smooth' });\r\n                                }\r\n                            }\r\n                        },\r\n                    }),\r\n                ]\r\n            }), scroller);\r\n        }\r\n    }\r\n\r\n    toggleSelectionList(dataKey: string, selected: HTMLElement, list: HTMLElement)\r\n    {\r\n        list.classList.toggle(styles['active']);\r\n        for (const nodesKey in this.selectionNodes) {\r\n            if (\r\n                this.selectionNodes.hasOwnProperty(nodesKey)\r\n                && nodesKey !== dataKey\r\n            ){\r\n                this.selectionNodes[nodesKey].listNode.classList.remove(styles['active']);\r\n            }\r\n        }\r\n    }\r\n\r\n    addItemActions(dataKey){\r\n        const items = this.selectionNodes[dataKey].listNode.children;\r\n        if (!items.length){\r\n            return;\r\n        }\r\n        for (let item of items) {\r\n            if (dataKey === this.dataKeys.scheduleKey)\r\n            {\r\n                const times = item.querySelectorAll('span');\r\n                times.length && times.forEach((time) => {\r\n                    time.addEventListener('click', (e)=>{\r\n                        e.stopPropagation();\r\n                        this.selectionNodes[dataKey].listNode.classList.remove(styles['active']);\r\n                        this.selectionNodes[dataKey].selectedNode.innerHTML = `\r\n                            <span>\r\n                                ${e.currentTarget.dataset.displayDate} - \r\n                                ${e.currentTarget.textContent}\r\n                            </span>\r\n                        `;\r\n\r\n                        this.changeStep(dataKey, e.currentTarget);\r\n                        this.activateBlocks();\r\n                    })\r\n                });\r\n            }\r\n            else{\r\n                item.addEventListener('click', (e)=>{\r\n                    e.stopPropagation();\r\n                    this.selectionNodes[dataKey].listNode.classList.remove(styles['active']);\r\n                    this.selectionNodes[dataKey].selectedNode.innerHTML = `<span>${e.currentTarget.textContent}</span>`;\r\n                    this.changeStep(dataKey, e.currentTarget);\r\n                    this.activateBlocks();\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    changeStep(dataKey, target){\r\n        this.selectionNodes[dataKey].inputNode.value = target.dataset.uid;\r\n        switch (dataKey) {\r\n            case this.dataKeys.clinicsKey:\r\n                this.filledInputs[dataKey].clinicUid = target.dataset.uid;\r\n                this.filledInputs[dataKey].clinicName = target.dataset.name;\r\n                if (this.useServices)\r\n                {\r\n                    this.form.classList.add(styles['loading']);\r\n                    this.getListNomenclature(`${target.dataset.uid}`)\r\n                        .then((nomenclature) => {\r\n                            if (nomenclature.data?.error){\r\n                                throw new Error(nomenclature.data.error);\r\n                            }else{\r\n                                if (Object.keys(nomenclature.data).length > 0){\r\n                                    this.data.services = nomenclature.data;\r\n                                    this.bindServicesToSpecialties();\r\n                                }\r\n                            }\r\n                            this.form.classList.remove(styles['loading'])\r\n                        })\r\n                        .catch(res => {\r\n                            this.logResultErrors(res);\r\n                        });\r\n                }\r\n                this.renderSpecialtiesList();\r\n                break;\r\n            case this.dataKeys.specialtiesKey:\r\n                this.filledInputs[dataKey].specialty = target.textContent;\r\n                this.filledInputs[dataKey].specialtyUid = target.dataset.uid;\r\n                if(this.useServices){\r\n                    if (this.selectDoctorBeforeService){\r\n                        this.renderEmployeesList();\r\n                    }else{\r\n                        this.renderServicesList();\r\n                    }\r\n                }else{\r\n                    this.renderEmployeesList();\r\n                }\r\n                break;\r\n            case this.dataKeys.servicesKey:\r\n                this.filledInputs[dataKey].serviceName = target.textContent;\r\n                this.filledInputs[dataKey].serviceUid = target.dataset.uid;\r\n                this.filledInputs[dataKey].serviceDuration = target.dataset.duration;\r\n                this.selectDoctorBeforeService ? this.renderScheduleList(): this.renderEmployeesList();\r\n                break;\r\n            case this.dataKeys.employeesKey:\r\n                this.filledInputs[dataKey].doctorName = target.textContent;\r\n                this.filledInputs[dataKey].refUid = target.dataset.uid;\r\n                if(this.useServices){\r\n                    if (this.selectDoctorBeforeService){\r\n                        this.renderServicesList();\r\n                    }else{\r\n                        this.renderScheduleList();\r\n                    }\r\n                }else{\r\n                    this.renderScheduleList();\r\n                }\r\n                break;\r\n            case this.dataKeys.scheduleKey:\r\n                this.filledInputs[dataKey].orderDate = target.dataset.date;\r\n                this.filledInputs[dataKey].timeBegin = target.dataset.start;\r\n                this.filledInputs[dataKey].timeEnd = target.dataset.end;\r\n                this.selectionNodes[dataKey].inputNode.value = target.dataset.date;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        this.step = dataKey;\r\n    }\r\n\r\n    bindServicesToSpecialties() {\r\n        const services  = this.data.services;\r\n        const employees = this.data.employees;\r\n        if(Object.keys(employees).length > 0)\r\n        {\r\n            for (const employeeUid in employees)\r\n            {\r\n                if (!employees.hasOwnProperty(employeeUid)) { return; }\r\n                const empServices = employees[employeeUid].services;\r\n                if(empServices && Object.keys(empServices).length > 0){\r\n                    for (const empServiceUid in empServices)\r\n                    {\r\n                        if (!empServices.hasOwnProperty(empServiceUid)) { return; }\r\n\r\n                        if (services.hasOwnProperty(empServiceUid)){\r\n                            const specialty = employees[employeeUid]['specialty'];\r\n                            if (specialty){\r\n                                services[empServiceUid].specialtyUid = this.createIdFromName(specialty);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    activateBlocks(){\r\n        let current = false;\r\n        let next = false;\r\n        for (const nodesKey in this.selectionNodes)\r\n        {\r\n            if (!this.useServices && nodesKey === this.dataKeys.servicesKey){\r\n                continue;\r\n            }\r\n\r\n            if (this.selectionNodes.hasOwnProperty(nodesKey))\r\n            {\r\n                const block = this.selectionNodes[nodesKey].blockNode;\r\n                if (!current && !next){\r\n                    block.classList.remove(styles[\"hidden\"])\r\n                }\r\n                else if (current && !next){\r\n                    block.classList.remove(styles[\"hidden\"])\r\n                    this.resetValue(nodesKey);\r\n                }\r\n                else{\r\n                    block.classList.add(styles[\"hidden\"]);\r\n                    this.resetValue(nodesKey);\r\n                }\r\n                next = current;\r\n                if(nodesKey === this.step) {\r\n                    current = true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resetValue(nodesKey: string) {\r\n        this.selectionNodes[nodesKey].selectedNode.textContent = this.defaultText[nodesKey];\r\n        this.selectionNodes[nodesKey].inputNode.value = \"\";\r\n        if (this.filledInputs.hasOwnProperty(nodesKey)){\r\n            for (const propKey in this.filledInputs[nodesKey]) {\r\n                if (this.filledInputs[nodesKey].hasOwnProperty(propKey)){\r\n                    this.filledInputs[nodesKey][propKey] = false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    submit(event) {\r\n        event.preventDefault();\r\n\r\n        if (this.checkRequiredFields())\r\n        {\r\n            this.messageNode ? this.messageNode.textContent = \"\" : void(0);\r\n            this.form.classList.add(styles['loading']);\r\n            let orderData = {...this.filledInputs.textValues};\r\n\r\n            for (let key in this.selectionNodes)\r\n            {\r\n                if (this.selectionNodes.hasOwnProperty(key) && this.filledInputs.hasOwnProperty(key))\r\n                {\r\n                    this.selectionNodes[key].inputNode.value = JSON.stringify(this.filledInputs[key]);\r\n                    orderData = {...orderData, ...this.filledInputs[key]};\r\n                }\r\n            }\r\n\r\n            if (this.useConfirmWith !== this.confirmTypes.none){\r\n                this.sendConfirmCode(orderData);\r\n            }\r\n            else\r\n            {\r\n                this.sendOrder(orderData);\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (this.messageNode){\r\n                this.messageNode.textContent = BX.message(\"FIRSTBIT_JS_ORDER_CHECK_FIELDS_ERROR\");\r\n            }\r\n            else {\r\n                this.logResultErrors(BX.message(\"FIRSTBIT_JS_ORDER_CHECK_FIELDS_ERROR\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    sendConfirmCode (params) {\r\n        this.messageNode.textContent = \"\";\r\n\r\n        BX.ajax.runAction('firstbit:appointment.messageController.sendConfirmCode', {\r\n            data: {\r\n                phone: params.phone,\r\n                email: params.email,\r\n                sessid: BX.bitrix_sessid()\r\n            }\r\n        })\r\n        .then(result => {\r\n            this.timeExpires = result.data?.timeExpires ?? ((new Date()).getTime() / 1000).toFixed(0) + 60;\r\n            this.createConfirmationForm(params);\r\n        })\r\n        .catch(result => {\r\n            this.messageNode.textContent = result.errors?.[0]?.message + BX.message(\"FIRSTBIT_JS_SOME_DISPLAY_ERROR_POSTFIX\");\r\n            this.logResultErrors(result);\r\n        });\r\n    }\r\n\r\n    createConfirmationForm (params){\r\n        this.confirmWrapper && this.confirmWrapper.remove();\r\n        this.confirmWrapper = this.renderer.getConfirmationBlock(params);\r\n        this.form.classList.add(styles['appointment-form-confirmation-mode']);\r\n        BX.insertBefore(this.confirmWrapper, this.submitBtn.closest('div'))\r\n    }\r\n\r\n    verifyConfirmCode (code, params, textNode, btnNode) {\r\n        btnNode.classList.add(styles['loading']);\r\n\r\n        BX.ajax.runAction('firstbit:appointment.messageController.verifyConfirmCode', {\r\n            data: {\r\n                code: code,\r\n                email: params.email,\r\n                sessid: BX.bitrix_sessid()\r\n            }\r\n        })\r\n        .then(() => this.sendOrder(params))\r\n        .catch(result => {\r\n            btnNode.classList.remove(styles['loading']);\r\n            if (result.errors?.length > 0){\r\n                result.errors.forEach((error) => {\r\n                    textNode.innerHTML = ((Number(error.code) === 400) || (Number(error.code) === 406) || (Number(error.code) === 425))\r\n                        ? `${textNode.innerHTML}${error.message}<br>`\r\n                        : BX.message(\"FIRSTBIT_JS_APPLICATION_ERROR\");\r\n                })\r\n            }\r\n        });\r\n    }\r\n\r\n    sendOrder(params) {\r\n        BX.ajax.runAction('firstbit:appointment.oneCController.addOrder', {\r\n            data: {\r\n                params: JSON.stringify(params),\r\n                sessid: BX.bitrix_sessid()\r\n            }\r\n        })\r\n        .then((result) => {\r\n            this.confirmWrapper && this.confirmWrapper.remove();\r\n            this.form.classList.remove(styles['appointment-form-confirmation-mode'], styles['loading']);\r\n\r\n            if (result.data?.error)\r\n            {\r\n                this.logResultErrors(result.data.error);\r\n                this.finalizingWidget(false);\r\n            }\r\n            else\r\n            {\r\n                if (this.useEmailNote && params.email)\r\n                {\r\n                    this.sendEmailNote(params);\r\n                }\r\n                this.finalizingWidget(true);\r\n            }\r\n        })\r\n        .catch(result => this.logResultErrors(result));\r\n    }\r\n\r\n    sendEmailNote(params) {\r\n        BX.ajax.runAction('firstbit:appointment.messageController.sendEmailNote', {\r\n            data: {\r\n                params: JSON.stringify(params),\r\n                sessid: BX.bitrix_sessid()\r\n            }\r\n        }).then().catch();\r\n    }\r\n\r\n    finalizingWidget(success) {\r\n        this.resultBlock.classList.add(styles['active']);\r\n        this.form.classList.add(styles['off']);\r\n\r\n        const resTextNode = this.resultBlock.querySelector('p');\r\n        if (resTextNode)\r\n        {\r\n            if (success)\r\n            {\r\n                const date = this.convertDateToDisplay(this.filledInputs[this.dataKeys.scheduleKey].timeBegin, false);\r\n                const time = this.convertDateToDisplay(this.filledInputs[this.dataKeys.scheduleKey].timeBegin, true);\r\n                const doctor = this.filledInputs[this.dataKeys.employeesKey].doctorName;\r\n                resTextNode.innerHTML = `${BX.message(\"FIRSTBIT_JS_APPOINTMENT_SUCCESS\")}\r\n                                         <br>${date} ${time}\r\n                                         <br>${BX.message(\"FIRSTBIT_JS_APPOINTMENT_DOCTOR\")} - ${doctor}` ;\r\n                resTextNode.classList.add(styles['success']);\r\n                this.finalAnimations();\r\n            }\r\n            else\r\n            {\r\n                resTextNode.append(this.createFinalError());\r\n                resTextNode.classList.add(styles['error']);\r\n                setTimeout(()=>{\r\n                    this.reload();\r\n                }, 5000);\r\n            }\r\n        }\r\n    }\r\n\r\n    finalAnimations(){\r\n        this.startBtn.classList.remove(styles['active']);\r\n        this.startBtn.classList.add(styles['success']);\r\n        setTimeout(()=>{\r\n            this.reload();\r\n        }, 4000);\r\n    }\r\n\r\n    reload(event = false){\r\n        event && event.preventDefault();\r\n        this.overlay.classList.remove(styles['active']);\r\n        this.firstInit = false;\r\n        this.loaded    = false;\r\n        setTimeout(this.run.bind(this), 500);\r\n    }\r\n\r\n    createFinalError () {\r\n        return BX.create('p', {\r\n            children: [\r\n                BX.create('span', {\r\n                    html: BX.message('FIRSTBIT_JS_APPOINTMENT_FINAL_ERROR_START')\r\n                }),\r\n                BX.create('a', {\r\n                    attrs: {\r\n                        href: \"#\"\r\n                    },\r\n                    text: BX.message('FIRSTBIT_JS_APPOINTMENT_FINAL_ERROR_LINK'),\r\n                    events: {\r\n                        click: (e) => this.reload(e)\r\n                    }\r\n                }),\r\n                BX.create('span', {\r\n                    html: BX.message('FIRSTBIT_JS_APPOINTMENT_FINAL_ERROR_END')\r\n                })\r\n            ]\r\n        });\r\n    }\r\n\r\n    checkRequiredFields(){\r\n        let allNotEmpty = true;\r\n\r\n        if (this.requiredInputs.length > 0){\r\n            this.requiredInputs.some((input) => {\r\n                if (!BX.type.isNotEmptyString(input.value))\r\n                {\r\n                    allNotEmpty = false;\r\n                    input.parentElement?.classList.add(styles[\"error\"])\r\n                    return true;\r\n                }\r\n                else\r\n                {\r\n                    input.parentElement?.classList.remove(styles[\"error\"]);\r\n                }\r\n            });\r\n        }\r\n        return allNotEmpty && this.phoneIsValid(this.textNodes.phone.inputNode);\r\n    }\r\n\r\n    phoneIsValid(phoneInput){\r\n        const phone = phoneInput.value;\r\n        let isValid = !( !phone || (phone.length !== this.phoneMask.length) );\r\n        if (phoneInput.parentElement !== null){\r\n            !isValid\r\n                ? phoneInput.parentElement.classList.add(styles[\"error\"])\r\n                : phoneInput.parentElement.classList.remove(styles[\"error\"]);\r\n        }\r\n        return isValid;\r\n    }\r\n\r\n    /**\r\n     * add input mask to all inputs with type=tel\r\n     */\r\n    addPhoneMasks(){\r\n        const maskedInputs = this.overlay.querySelectorAll('input[type=\"tel\"]');\r\n        const that = this;\r\n        maskedInputs.length && maskedInputs.forEach((input: HTMLInputElement) => {\r\n            input.addEventListener('input', (e) => {\r\n                that.maskInput(e.currentTarget, this.phoneMask);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * add BX.calendar extension to select birthday date on related input\r\n     */\r\n    addCalendarSelection(){\r\n        const that = this;\r\n        const birthdayInput = this.overlay.querySelector('input[name=\"birthday\"]');\r\n        birthdayInput.addEventListener('keydown', (e) => {\r\n            e.preventDefault();\r\n            return false;\r\n        });\r\n        birthdayInput.addEventListener('click', () => {\r\n            BX.calendar({\r\n                node: birthdayInput,\r\n                field: birthdayInput,\r\n                bTime: false,\r\n                callback_after: function(date){\r\n                    const timestamp = (new Date(date)).getTime();\r\n                    that.filledInputs.textValues.birthday = that.convertDateToISO(timestamp);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * inject styles with custom color variables from module settings\r\n     */\r\n    addCustomColors(){\r\n        if (Object.keys(this.customColors).length > 0)\r\n        {\r\n            const style = BX.create('style');\r\n            style.textContent = `.${styles['appointment-popup-overlay']}, .${styles['appointment-button-wrapper']}{`\r\n            for (let key in this.customColors){\r\n                if (this.customColors.hasOwnProperty(key))\r\n                {\r\n                    switch (key) {\r\n                        case \"--appointment-main-color\":\r\n                            const hslM = convertHexToHsl(this.customColors[key]);\r\n                            if (hslM){\r\n                                style.textContent += `--main-h: ${hslM.h};--main-s: ${hslM.s};--main-l: ${hslM.l};`;\r\n                            }\r\n                            break;\r\n                        case \"--appointment-field-color\":\r\n                            const hslF = convertHexToHsl(this.customColors[key]);\r\n                            if (hslF){\r\n                                style.textContent += `-field-h: ${hslF.h};--field-s: ${hslF.s};--field-l: ${hslF.l};`;\r\n                            }\r\n                            break;\r\n                        default:\r\n                            style.textContent += `${key}: ${this.customColors[key]};`;\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n            style.textContent = style.textContent + `}`;\r\n            this.overlay.after(style);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * show/hide popup with appointment form and starts loading data from 1c on first showing\r\n     */\r\n    togglePopup() {\r\n        this.overlay.classList.toggle(styles['active']);\r\n        this.useCustomMainBtn ? this.startBtn.classList.toggle('active')\r\n            : this.startBtn.classList.toggle(styles['active']);\r\n        if (!this.loaded){\r\n            this.start();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * toggle load animation on form\r\n     * @param on\r\n     */\r\n    toggleLoader(on = true){\r\n        on  ? this.form.classList.add(styles['loading'])\r\n            : this.form.classList.remove(styles['loading'])\r\n    }\r\n\r\n    /**\r\n     * add phone mask\r\n     * @param input\r\n     * @param mask\r\n     */\r\n    maskInput(input, mask){\r\n        const value = input.value;\r\n        const literalPattern = /[0]/;\r\n        const numberPattern = /[0-9]/;\r\n\r\n        let newValue = \"\";\r\n\r\n        let valueIndex = 0;\r\n\r\n        for (let i = 0; i < mask.length; i++) {\r\n                if (i >= value.length) break;\r\n                if (mask[i] === \"0\" && !numberPattern.test(value[valueIndex])) break;\r\n                while (!literalPattern.test(mask[i])) {\r\n                if (value[valueIndex] === mask[i]) break;\r\n                newValue += mask[i++];\r\n            }\r\n            newValue += value[valueIndex++];\r\n        }\r\n\r\n        input.value = newValue;\r\n    }\r\n\r\n    /**\r\n     * convert date to ISO format without seconds\r\n     * @param timestamp\r\n     * @returns {string}\r\n     */\r\n    convertDateToISO (timestamp) {\r\n        const date = this.readDateInfo(timestamp);\r\n\r\n        return `${date.year}-${date.month}-${date.day}T${date.hours}:${date.minutes}:00`;\r\n    }\r\n\r\n    /**\r\n     * convert date to format \"d-m-Y\" / \"d.m.Y\" / \"H:i\"\r\n     * @param timestamp\r\n     * @param onlyTime\r\n     * @param onlyDate\r\n     * @returns {string}\r\n     */\r\n    convertDateToDisplay (timestamp, onlyTime = false, onlyDate = false) {\r\n        const date = this.readDateInfo(timestamp);\r\n\r\n        if (onlyTime){\r\n            return `${date.hours}:${date.minutes}`;\r\n        }\r\n        if (onlyDate){\r\n            return `${date.day}.${date.month}.${date.year}`;\r\n        }\r\n        return `${date.day}-${date.month}-${date.year}`;\r\n    }\r\n\r\n    /**\r\n     * convert param to object with detail info about date\r\n     * @param timestampOrISO\r\n     * @returns {{hours: string, seconds: string, month: string, year: number, minutes: string, weekDay, day: string}}\r\n     */\r\n    readDateInfo(timestampOrISO){\r\n        const date = new Date(timestampOrISO);\r\n\r\n        let day = `${date.getDate()}`;\r\n        if (Number(day)<10) {\r\n            day = `0${day}`;\r\n        }\r\n\r\n        let month = `${date.getMonth()+1}`;\r\n        if (Number(month)<10) {\r\n            month = `0${month}`;\r\n        }\r\n\r\n        let hours = `${date.getHours()}`;\r\n        if (Number(hours)<10) {\r\n            hours = `0${hours}`;\r\n        }\r\n\r\n        let minutes = `${date.getMinutes()}`;\r\n        if (Number(minutes)<10) {\r\n            minutes = `0${minutes}`;\r\n        }\r\n\r\n        let seconds = `${date.getSeconds()}`;\r\n        if (Number(seconds)<10) {\r\n            seconds = `0${seconds}`;\r\n        }\r\n\r\n        return {\r\n            \"day\": day,\r\n            \"month\": month,\r\n            \"year\": date.getFullYear(),\r\n            \"hours\": hours,\r\n            \"minutes\": minutes,\r\n            \"seconds\": seconds,\r\n            \"weekDay\": this.ucFirst(date.toLocaleString('ru', {weekday: 'short'}))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * make unique code from string\r\n     * @param str\r\n     * @returns {*}\r\n     */\r\n    createIdFromName(str) {\r\n        return window.btoa(window.unescape(encodeURIComponent(str)));\r\n    }\r\n\r\n    /**\r\n     * make the first letter of a string uppercase\r\n     * @param str\r\n     * @returns {string|*}\r\n     */\r\n    ucFirst(str) {\r\n        if (!str) return str;\r\n\r\n        return str[0].toUpperCase() + str.slice(1);\r\n    }\r\n\r\n    /**\r\n     * error logging\r\n     * @param res\r\n     */\r\n    logResultErrors(res) {\r\n        if (res.errors && Array.isArray(res.errors) && res.errors.length > 0)\r\n        {\r\n            res.errors.forEach(error => {\r\n                console.log(`${BX.message(\"FIRSTBIT_JS_APPLICATION_ERROR\")} - ${error.message}`)\r\n            })\r\n        }\r\n        else\r\n        {\r\n            console.log(BX.message(\"FIRSTBIT_JS_APPLICATION_ERROR\") + \"\\r\\n\", res.message ?? res);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * init elements selectors\r\n     */\r\n    getAppSelectors(stylesObject)\r\n    {\r\n        return {\r\n            rootNodeId:         'firstbit-appointment-application-root',\r\n            overlayId:          'appointment-popup-steps-overlay',\r\n            startBtnWrapId:     stylesObject['appointment-button-wrapper'],\r\n            startBtnId:         stylesObject['appointment-button'],\r\n            formId:             stylesObject['appointment-form'],\r\n            mobileCloseBtnId:   stylesObject['appointment-form-close'],\r\n            messageNodeId:      stylesObject['appointment-form-message'],\r\n            submitBtnId:        stylesObject['appointment-form-button'],\r\n            appResultBlockId:   stylesObject['appointment-result-block'],\r\n            inputClass:         stylesObject['appointment-form_input'],\r\n            textareaClass:      stylesObject['appointment-form_textarea'],\r\n            confirmWrapperId:   stylesObject['appointment-form-confirmation-wrapper']\r\n        }\r\n    }\r\n}","'use strict';\nimport {AppointmentSteps} from './appointment/app';\n\nBX.ajax.runComponentAction('firstbit:appointment.add', 'getResult', {\n    mode: 'ajax',\n    data: {\n        sessid: BX.bitrix_sessid()\n    }\n})\n.then(function (response)\n{\n    const AppPlace = BX.namespace('FirstBit.Appointment');\n    AppPlace.AppointmentSteps = new AppointmentSteps(response.data);\n    AppPlace.AppointmentSteps.run();\n})\n.catch(function (e)\n{\n    if (e.errors && BX.type.isArray(e.errors))\n        {\n            let errorText = '';\n            response.errors.forEach(error => {\n                errorText = `${errorText} ${error.code} - ${error.message};`;\n            })\n            console.log(errorText)\n        }\n        else\n        {\n            console.log('app data loading error', e);\n        }\n});"],"names":["convertHexToHsl","hex","result","exec","r","parseInt","g","b","s","max","Math","min","h","l","d","round","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","EventManager","target","eventName","handler","options","Event","bind","EventEmitter","Renderer","styles","application","BX","create","attrs","id","this","selectors","overlayId","className","children","formId","html","getSelectionNodes","getTextNodes","messageNodeId","submitBtnId","text","message","href","initParams","privacyPageLink","appResultBlockId","arNodes","key","_this","selectionBlocks","hasOwnProperty","selected","selectedId","defaultText","events","click","toggleSelectionList","list","listId","input","inputId","name","push","blockId","dataKeys","clinicsKey","textBlocks","tag","getTextInputAttrs","preparedAttrs","attr","startBtnWrapId","startBtnId","orderData","confirmWarningNode","confirmInputNode","placeholder","required","autocomplete","e","value","length","substring","confirmSubmitBtn","textContent","_this2","form","classList","add","verifyConfirmCode","confirmRepeatBtn","confirmWrapper","confirmWrapperId","curTimeSeconds","Number","Date","getTime","toFixed","remainingTime","timeExpires","interval","setInterval","addEventListener","preventDefault","sendConfirmCode","clearInterval","TextInputNames","AppointmentSteps","params","specialtiesKey","employeesKey","servicesKey","scheduleKey","clinics","employees","services","schedule","firstInit","getAppSelectors","selectionSteps","Object","values","useServices","selectDoctorBeforeService","useTimeSteps","timeStepDurationMinutes","strictCheckingOfRelations","showDoctorsWithoutDepartment","confirmTypes","useConfirmWith","useEmailNote","useCustomMainBtn","customColors","filledInputs","clinicUid","clinicName","specialty","specialtyUid","serviceUid","serviceName","serviceDuration","refUid","doctorName","orderDate","timeBegin","timeEnd","_this$filledInputs","textValues","_this$filledInputs$te2","surname","_this$filledInputs2","_this$filledInputs2$t","middleName","_this$filledInputs3","_this$filledInputs3$t","phone","_this$filledInputs4","_this$filledInputs4$t","address","_this$filledInputs5","_this$filledInputs5$t","email","_this$filledInputs6","_this$filledInputs6$t","birthday","_this$filledInputs7","_this$filledInputs7$t","comment","_this$filledInputs8","_this$filledInputs8$t","prepareSelectionBlocksForRender","renderer","forEach","step","toUpperCase","checkRoot","insertAppHtml","init","root","isDomNode","cleanNode","getDivElement","rootNodeId","append","body","getAppHtmlSkeleton","getDefaultStartBtn","initCustomEvents","initStartBtn","initBaseNodes","initOverlayAction","initForm","initMobileCloseBtn","initSelectionNodes","initTextNodes","addPhoneMasks","addCalendarSelection","addCustomColors","logResultErrors","subscribe","fullDataLoaded","startRender","customMainBtnId","startBtn","Error","togglePopup","overlay","startBtnWrap","mobileCloseBtn","mobileCloseBtnId","messageNode","submitBtn","resultBlock","getAttribute","_this3","submit","selectionNodes","blockNode","listNode","selectedNode","inputNode","isRequired","requiredInputs","block","currentValue","_this4","date","convertDateToDisplay","val","phoneMask","textNodes","toggleLoader","loadData","then","_this5","loaded","res","getListClinic","clinicsResponse","data","_clinicsResponse$data","error","Promise","reject","_clinicsResponse$data2","getListEmployees","employeesResponse","_employeesResponse$da","_employeesResponse$da2","keys","getSchedule","scheduleResponse","_scheduleResponse$dat","_scheduleResponse$dat2","_scheduleResponse$dat3","emit","resolve","ajax","runAction","sessid","bitrix_sessid","clinicGuid","renderClinicList","isUpdate","dataKey","JSON","parse","renderSpecialtiesList","renderEmployeesList","renderScheduleList","setTimeout","_this6","clinicsList","clinic","uid","dataset","addItemActions","specialtiesList","clinicCondition","canRender","createIdFromName","querySelector","servicesList","renderCondition","selectedEmployeeUid","price","replace","duration","empList","innerHTML","selectedSpecialty","selectedClinic","specialtyCondition","selectedServiceUid","scheduleList","employeeSchedule","_this7","selectedEmployee","selectedService","personalDuration","renderCustomIntervals","timeKey","timetable","renderDate","intervals","customIntervals","getIntervalsForServiceDuration","renderColumn","undefined","day","index","isLast","createDayColumn","displayDate","start","end","addHorizontalScrollButtons","serviceDurationMs","newIntervals","timestampTimeBegin","timestampTimeEnd","timeDifference","appointmentsCount","floor","_this8","convertDateToISO","setMinutes","getMinutes","i","readDateInfo","weekDay","scroller","item","itemWidth","clientWidth","scrollLeft","scrollBy","left","top","behavior","scrollTo","scrollWidth","nodesKey","toggle","remove","items","times","querySelectorAll","time","stopPropagation","_this9","currentTarget","changeStep","activateBlocks","getListNomenclature","nomenclature","_nomenclature$data","_this10","bindServicesToSpecialties","renderServicesList","employeeUid","empServices","empServiceUid","current","next","resetValue","propKey","event","checkRequiredFields","stringify","none","sendOrder","_this11","_result$data","createConfirmationForm","errors","getConfirmationBlock","closest","code","textNode","btnNode","_this12","_this13","_result$data2","finalizingWidget","sendEmailNote","success","resTextNode","doctor","finalAnimations","createFinalError","_this14","reload","_this15","run","_this16","allNotEmpty","some","isNotEmptyString","parentElement","phoneIsValid","phoneInput","isValid","maskedInputs","that","maskInput","_this17","birthdayInput","calendar","node","field","bTime","callback_after","timestamp","hslM","hslF","after","on","mask","literalPattern","numberPattern","newValue","valueIndex","test","year","month","hours","minutes","onlyTime","onlyDate","timestampOrISO","getDate","getMonth","getHours","seconds","getSeconds","getFullYear","ucFirst","toLocaleString","weekday","str","window","btoa","unescape","encodeURIComponent","slice","Array","isArray","console","log","stylesObject","inputClass","textareaClass","runComponentAction","mode","response","AppPlace","namespace","errorText"],"mappings":"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"}